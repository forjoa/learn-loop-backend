generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// users
model user {
  id        Int      @id @default(autoincrement()) @map("id")
  email     String   @unique @map("email")
  name      String   @map("name")
  password  String   @map("password")
  role      String   @default("STUDENT") @map("role") // "STUDENT" or "TEACHER"
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  enrollments enrollment[]
  posts       post[]
  messages    message[]
  files       file[]

  sent_messages message[] @relation("SentMessages")
  received_messages message[] @relation("ReceivedMessages")

  topic topic[]
}

// topics
model topic {
  id          Int      @id @default(autoincrement()) @map("id")
  title       String   @map("title")
  description String?  @map("description")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  ownerId     Int      @map("owner_id") // El propietario del topic (Teacher)
  owner       user     @relation(fields: [ownerId], references: [id])

  users       enrollment[]
  posts       post[]
  files       file[]
  chats       chat[]
}

// users and topics (enrollment)
model enrollment {
  id      Int   @id @default(autoincrement()) @map("id")
  userId  Int   @map("user_id")
  topicId Int   @map("topic_id")

  user  user  @relation(fields: [userId], references: [id])
  topic topic @relation(fields: [topicId], references: [id])

  status String @default("PENDING") @map("status") // "PENDING", "APPROVED", "REJECTED"
}

// files
model file {
  id        Int      @id @default(autoincrement()) @map("id")
  url       String   @map("url")
  filename  String   @map("filename")
  fileType  String   @map("file_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId Int    @map("user_id")
  user   user   @relation(fields: [userId], references: [id])

  topicId Int    @map("topic_id")
  topic   topic  @relation(fields: [topicId], references: [id])
}

// posts
model post {
  id        Int      @id @default(autoincrement()) @map("id")
  title     String   @map("title")
  content   String?  @map("content")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId   Int    @map("user_id")
  user     user   @relation(fields: [userId], references: [id])

  topicId  Int    @map("topic_id")
  topic    topic  @relation(fields: [topicId], references: [id])
}

// chats
model chat {
  id        Int      @id @default(autoincrement()) @map("id")
  topicId   Int      @map("topic_id")
  createdAt DateTime @default(now()) @map("created_at")

  topic topic @relation(fields: [topicId], references: [id])

  messages message[]
}

// messages
model message {
  id         Int      @id @default(autoincrement()) @map("id")
  content    String   @map("content")
  senderId   Int      @map("sender_id")
  receiverId Int?     @map("receiver_id")
  createdAt  DateTime @default(now()) @map("created_at")

  sender   user   @relation("SentMessages", fields: [senderId], references: [id])
  receiver user?  @relation("ReceivedMessages", fields: [receiverId], references: [id])

  chatId   Int?   @map("chat_id")
  chat     chat?  @relation(fields: [chatId], references: [id])

  user user[]
}
