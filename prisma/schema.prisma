generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// users
model user {
  id        String   @id @default(uuid()) @map("id")
  email     String   @unique @map("email")
  name      String   @map("name")
  password  String   @map("password")
  photo     String   @default("ant.png") @map("photo")
  role      String   @default("STUDENT") @map("role") // "STUDENT" or "TEACHER"
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  enrollments enrollment[]
  posts       post[]
  messages    message[]

  sent_messages message[] @relation("SentMessages")

  topic topic[]

  chat_member chat_member[]

  notification notification[]
}

// topics
model topic {
  id          String   @id @default(uuid()) @map("id")
  title       String   @map("title")
  description String?  @map("description")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  ownerId String @map("owner_id")
  owner   user   @relation(fields: [ownerId], references: [id])

  users enrollment[]
  posts post[]
  chats chat[]
}

// users and topics (enrollments)
model enrollment {
  id      String @id @default(uuid()) @map("id")
  userId  String @map("user_id")
  topicId String @map("topic_id")

  user  user  @relation(fields: [userId], references: [id])
  topic topic @relation(fields: [topicId], references: [id])

  status String @default("PENDING") @map("status") // "PENDING", "APPROVED", "REJECTED"
}

// files
model file {
  id        String   @id @default(uuid()) @map("id")
  url       String   @map("url")
  filename  String   @map("filename")
  fileType  String   @map("file_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  postId String @map("post_id")
  post   post   @relation(fields: [postId], references: [id])
}

// posts
model post {
  id        String   @id @default(uuid()) @map("id")
  title     String   @map("title")
  content   String?  @map("content")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   user   @relation(fields: [userId], references: [id])

  topicId String @map("topic_id")
  topic   topic  @relation(fields: [topicId], references: [id])
  file    file[]
}

// notifications
model notification {
  id           String   @id @default(uuid()) @map("id")
  userId       String   @map("user_id")
  title        String   @map("title")
  content      String   @map("content")
  enrollmentId String?  @map("enrollment_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user user @relation(fields: [userId], references: [id])
}

// chats
model chat {
  id        String   @id @default(uuid())
  topicId   String   @map("topic_id")
  createdAt DateTime @default(now())

  topic    topic         @relation(fields: [topicId], references: [id])
  messages message[]
  members  chat_member[]
}

model chat_member {
  id       String   @id @default(uuid())
  chatId   String   @map("chat_id")
  userId   String   @map("user_id")
  joinedAt DateTime @default(now())

  chat chat @relation(fields: [chatId], references: [id])
  user user @relation(fields: [userId], references: [id])

  @@unique([chatId, userId])
}

// messages
model message {
  id        String   @id @default(uuid())
  content   String
  senderId  String   @map("sender_id")
  createdAt DateTime @default(now())

  sender user @relation("SentMessages", fields: [senderId], references: [id])

  chatId String  @map("chat_id")
  chat   chat    @relation(fields: [chatId], references: [id])
  user   user?   @relation(fields: [userId], references: [id])
  userId String?
}
