generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// users
model user {
  id        Int      @id @default(autoincrement()) @map("id")
  email     String   @unique @map("email")
  name      String   @map("name")
  password  String   @map("password")
  photo     String   @default("ant.png") @map("photo")
  role      String   @default("STUDENT") @map("role") // "STUDENT" or "TEACHER"
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  enrollments enrollment[]
  posts       post[]
  messages    message[]
  files       file[]

  sent_messages message[] @relation("SentMessages")

  topic topic[]

  chat_member chat_member[]

  notification notification[]
}

// topics
model topic {
  id          Int      @id @default(autoincrement()) @map("id")
  title       String   @map("title")
  description String?  @map("description")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  ownerId Int  @map("owner_id") // El propietario del topic (Teacher)
  owner   user @relation(fields: [ownerId], references: [id])

  users enrollment[]
  posts post[]
  files file[]
  chats chat[]
}

// users and topics (enrollments)
model enrollment {
  id      Int @id @default(autoincrement()) @map("id")
  userId  Int @map("user_id")
  topicId Int @map("topic_id")

  user  user  @relation(fields: [userId], references: [id])
  topic topic @relation(fields: [topicId], references: [id])

  status String @default("PENDING") @map("status") // "PENDING", "APPROVED", "REJECTED"
}

// files
model file {
  id        Int      @id @default(autoincrement()) @map("id")
  url       String   @map("url")
  filename  String   @map("filename")
  fileType  String   @map("file_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId Int  @map("user_id")
  user   user @relation(fields: [userId], references: [id])

  topicId Int   @map("topic_id")
  topic   topic @relation(fields: [topicId], references: [id])
}

// posts
model post {
  id        Int      @id @default(autoincrement()) @map("id")
  title     String   @map("title")
  content   String?  @map("content")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId Int  @map("user_id")
  user   user @relation(fields: [userId], references: [id])

  topicId Int   @map("topic_id")
  topic   topic @relation(fields: [topicId], references: [id])
}

// notifications
model notification {
  id        Int      @id @default(autoincrement()) @map("id")
  userId    Int      @map("user_id")
  title     String   @map("title")
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user user @relation(fields: [userId], references: [id])
}

// chats
model chat {
  id        Int      @id @default(autoincrement()) @map("id")
  topicId   Int      @map("topic_id")
  createdAt DateTime @default(now()) @map("created_at")

  topic    topic         @relation(fields: [topicId], references: [id])
  messages message[]
  members  chat_member[] // Relaci√≥n con chat_member
}

model chat_member {
  id       Int      @id @default(autoincrement()) @map("id")
  chatId   Int      @map("chat_id")
  userId   Int      @map("user_id")
  joinedAt DateTime @default(now()) @map("joined_at")

  chat chat @relation(fields: [chatId], references: [id])
  user user @relation(fields: [userId], references: [id])

  @@unique([chatId, userId]) // Asegura que un usuario no se repita en el mismo chat
}

// messages
model message {
  id        Int      @id @default(autoincrement()) @map("id")
  content   String   @map("content")
  senderId  Int      @map("sender_id")
  createdAt DateTime @default(now()) @map("created_at")

  sender user @relation("SentMessages", fields: [senderId], references: [id])

  chatId Int?  @map("chat_id")
  chat   chat? @relation(fields: [chatId], references: [id])

  user user[]
}
